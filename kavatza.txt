v8::Handle<v8::Value> create(const Arguments& args) {
    Handle<ObjectTemplate> templ = ObjectTemplate::New();
    templ->Set("aValue", Integer::New(10));
    return templ->NewInstance();
}

int g_anint = 10;

class MyType {
    int m_prop;
    std::string m_str;

public:
    int m_publicProp;

    MyType() {
        m_prop = 0;
        m_publicProp = 0;
        m_str = "undef";
        printf("MyType() - default constructor\n");
    }

    MyType(int prop) {
        m_prop = prop;
        m_publicProp = 0;
        m_str = "undef";
        printf("MyType() - constructor with argument: %d\n", m_prop);
    }

    MyType(std::string str) {
        m_prop = 0;
        m_publicProp = 0;
        m_str = str;
        printf("MyType() - constructor with argument: '%s'\n", m_str.c_str());
    }

    MyType(int prop, std::string str) {
        m_prop = prop;
        m_publicProp = 0;
        m_str = str;
        printf("MyType() - constructor A with 2 arguments: %d, '%s'\n", m_prop, m_str.c_str());
    }

    MyType(std::string str, int prop) {
        m_prop = prop;
        m_publicProp = 0;
        m_str = str;
        printf("MyType() - constructor B with 2 arguments: '%s', %d\n", m_str.c_str(), m_prop);
    }
    ~MyType() {
    }

    int getProp() const{
        return m_prop;
    }

    void setProp(int prop) {
        m_prop = prop;
    }

    std::string getStr() {
        return m_str;
    }

    void setStr(std::string str) {
        m_str = str;
    }

    void aMethod(int a, std::string b) {
        printf("called aMethd(a:%d b:'%s')\n", a, b.c_str());
    }
};

void globalMethod(MyType* obj, int val) {
    if(obj)
        obj->m_publicProp = val;
}

std::vector<Persistent<Object> > g_map;

void storeInstance(Persistent<Object> jsp_obj, MyType* native_obj) {
}

base::ClassDef<MyType>("MyType")
        .constructor()
        .constructor<MyType* (int)>()
        .constructor<MyType* (std::string)>()
        .constructor<MyType* (int, std::string)>()
        .constructor<MyType* (std::string, int)>()
        .prop("prop", &MyType::getProp, &MyType::setProp)
        .prop("publicProp", &MyType::m_publicProp)
        .prop("str", &MyType::getStr, &MyType::setStr)
        .var("global_int", &g_anint)
        .method("aMethod", &MyType::aMethod)
        .gmethod("gMethod", &globalMethod)
        .func("printMessage", &printMessage)
        .setInstanceFunc(&storeInstance)
        .bindTo();